// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: interface.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReturnResultFromWorkerClient is the client API for ReturnResultFromWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReturnResultFromWorkerClient interface {
	ReturnResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error)
	RequestFromClient(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
}

type returnResultFromWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewReturnResultFromWorkerClient(cc grpc.ClientConnInterface) ReturnResultFromWorkerClient {
	return &returnResultFromWorkerClient{cc}
}

func (c *returnResultFromWorkerClient) ReturnResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/helloworld.ReturnResultFromWorker/ReturnResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *returnResultFromWorkerClient) RequestFromClient(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/helloworld.ReturnResultFromWorker/RequestFromClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReturnResultFromWorkerServer is the server API for ReturnResultFromWorker service.
// All implementations must embed UnimplementedReturnResultFromWorkerServer
// for forward compatibility
type ReturnResultFromWorkerServer interface {
	ReturnResult(context.Context, *Result) (*Empty, error)
	RequestFromClient(context.Context, *Request) (*Result, error)
	mustEmbedUnimplementedReturnResultFromWorkerServer()
}

// UnimplementedReturnResultFromWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedReturnResultFromWorkerServer struct {
}

func (UnimplementedReturnResultFromWorkerServer) ReturnResult(context.Context, *Result) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnResult not implemented")
}
func (UnimplementedReturnResultFromWorkerServer) RequestFromClient(context.Context, *Request) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestFromClient not implemented")
}
func (UnimplementedReturnResultFromWorkerServer) mustEmbedUnimplementedReturnResultFromWorkerServer() {
}

// UnsafeReturnResultFromWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReturnResultFromWorkerServer will
// result in compilation errors.
type UnsafeReturnResultFromWorkerServer interface {
	mustEmbedUnimplementedReturnResultFromWorkerServer()
}

func RegisterReturnResultFromWorkerServer(s grpc.ServiceRegistrar, srv ReturnResultFromWorkerServer) {
	s.RegisterService(&ReturnResultFromWorker_ServiceDesc, srv)
}

func _ReturnResultFromWorker_ReturnResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReturnResultFromWorkerServer).ReturnResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.ReturnResultFromWorker/ReturnResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReturnResultFromWorkerServer).ReturnResult(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReturnResultFromWorker_RequestFromClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReturnResultFromWorkerServer).RequestFromClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.ReturnResultFromWorker/RequestFromClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReturnResultFromWorkerServer).RequestFromClient(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ReturnResultFromWorker_ServiceDesc is the grpc.ServiceDesc for ReturnResultFromWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReturnResultFromWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.ReturnResultFromWorker",
	HandlerType: (*ReturnResultFromWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReturnResult",
			Handler:    _ReturnResultFromWorker_ReturnResult_Handler,
		},
		{
			MethodName: "RequestFromClient",
			Handler:    _ReturnResultFromWorker_RequestFromClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interface.proto",
}
